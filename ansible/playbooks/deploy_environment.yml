- name: Setup Production and Staging Environments
  hosts: all
  become: yes
  vars:
    minikube_version: "v1.24.0"
    docker_compose_version: "1.29.2"
    node_exporter_version: "1.5.0"
    ubuntu_release: "focal"

  tasks:
    # Common setup: Update and install prerequisites
    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present

    # Install Docker (required for both environments)
    # Step 1: Create directory for APT keyrings
    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # Step 2: Download and dearmor the Docker GPG key
    - name: Download and dearmor Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    # Step 3: Set permissions on Docker GPG key
    - name: Set permissions on Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    # Step 4: Add the Docker repository
    - name: Add Docker repository
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ubuntu_release }} stable
        mode: '0644'

    # Step 5: Update APT package index
    - name: Update APT package index
      apt:
        update_cache: yes
        force_apt_get: yes

    # Step 6: Install Docker packages
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    # Install Node Exporter
    - name: Create a directory for Node Exporter
      file:
        path: /opt/node_exporter
        state: directory
        mode: '0755'

    - name: Download Node Exporter binary
      get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        dest: /tmp/node_exporter.tar.gz

    - name: Extract Node Exporter binary
      unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /opt/node_exporter
        remote_src: yes

    - name: Move Node Exporter binary to /usr/local/bin
      copy:
        remote_src: yes
        src: /opt/node_exporter/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'

    - name: Create a systemd service file for Node Exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Prometheus Node Exporter
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/node_exporter
          Restart=always

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start Node Exporter service
      systemd:
        name: node_exporter
        enabled: yes
        state: started

    # Environment-specific setup: Minikube for production
    - name: Install Minikube dependencies
      apt:
        name:
          - conntrack
          - socat
          - ebtables
          - ethtool
        state: present

    - name: Download Minikube binary (production environment)
      get_url:
        url: "https://storage.googleapis.com/minikube/releases/{{ minikube_version }}/minikube-linux-amd64"
        dest: /usr/local/bin/minikube
        mode: '0755'
      when: "'production' in group_names"

    - name: Start Minikube cluster (production environment)
      command: minikube start --driver=docker
      when: "'production' in group_names"

    # Environment-specific setup: Docker Compose for staging
    - name: Download Docker Compose (staging environment)
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-$(uname -s)-$(uname -m)"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      when: "'staging' in group_names"

    - name: Verify Docker Compose installation
      command: docker-compose --version
      when: "'staging' in group_names"

    - name: Start application containers with Docker Compose (staging environment)
      copy:
        content: |
          version: '3'
          services:
            app:
              image: nginx
              ports:
                - "8080:80"
        dest: /home/{{ ansible_user }}/docker-compose.yml
      when: "'staging' in group_names"

    - name: Launch Docker Compose
      command: docker-compose up -d
      args:
        chdir: /home/{{ ansible_user }}
      when: "'staging' in group_names"
